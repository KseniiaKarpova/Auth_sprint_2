version: '3.9'

services:

#_____________admin______________

  app:
    build:
      context: DjangoAdmin
      dockerfile: Dockerfile
    container_name: django_admin
    expose:
      - 8003
    env_file:
      - .env
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./DjangoAdmin:/app/
    depends_on:
      cinema_postgres:
        condition: service_started

#_____________content______________
  cinema_api:
    container_name: cinema-api
    image: cinema_api
    command: gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:7000
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    build:
      context: CinemaAPI
      dockerfile: Dockerfile
    volumes:
      - ./CinemaAPI/src:/app
    depends_on:
      cinema_postgres:
        condition: service_started
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started

  file_api:
    container_name: file_api
    command: gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:7070
    env_file:
      - .env
    build:
      context: FileAPI
      dockerfile: Dockerfile
    ports:
      - "7070:7070"
    depends_on:
      file_postgres:
        condition: service_healthy
      minio:
        condition: service_started
    volumes:
      - ./FileAPI/src:/src

  etl:
    container_name: etl
    build:
      context: ETL
      dockerfile: dockerfile
    command: python3 main.py
    depends_on:
      cinema_postgres:
        condition: service_started
      elasticsearch:
        condition: service_started
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      PYTHONPATH: /src
      DB_NAME: ${CINEMA_POSTGRES_NAME}
      DB_USER: ${CINEMA_POSTGRES_USER}
      DB_PASSWORD: ${CINEMA_POSTGRES_PASSWORD}
      DB_HOST: ${CINEMA_POSTGRES_HOST}
      DB_PORT: ${CINEMA_POSTGRES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
    volumes:
      - ./ETL:/src

  cinema_postgres:
    build:
      context: ./CinemaPostgres
      dockerfile: dockerfile
    container_name: cinema_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${CINEMA_POSTGRES_PASSWORD}
      - POSTGRES_USER=${CINEMA_POSTGRES_USER}
      - POSTGRES_DB=${CINEMA_POSTGRES_NAME}
    volumes:
      - cinema_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${CINEMA_POSTGRES_USER} -d ${CINEMA_POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  file_postgres:
    image: postgres:15.5-alpine3.19
    container_name: postgres_file_api
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${FILE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${FILE_POSTGRES_USER}
      - POSTGRES_DB=${FILE_POSTGRES_NAME}
      - POSTGRES_PORT=${FILE_POSTGRES_PORT}
    expose:
      - 5432
    volumes:
      - file_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${FILE_POSTGRES_USER} -d ${FILE_POSTGRES_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  cinema_faker:
    build:
      context: Faker
      dockerfile: Dockerfile
    container_name: cinema_data_faker
    ports:
      - "8888:8888"
    env_file:
      - .env

  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis
    restart: always
    env_file:
      - .env
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
        - .env
    environment:
      - MINIO_ROOT_USER=${S3_USER}
      - MINIO_ROOT_PASSWORD=${S3_PASSWORD}
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
    env_file:
      - .env
    volumes:
      - es_data:/usr/share/elasticsearch/data

#______________Auth_______________
  auth_api:
    container_name: AuthAPI
    command: gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:9999
    env_file:
      - .env
    environment:
      PYTHONPATH: /src
    volumes:
      - ./AuthAPI:/src
    build:
      context: AuthAPI
      dockerfile: Dockerfile
    depends_on:
      auth_postgres:
        condition: service_started
      redis:
        condition: service_started

  auth_jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: auth_jaeger
    ports:
      - '6831:6831/udp'
      - '16686:16686'
    depends_on:
      - auth_api
      - cinema_api
      - nginx

  auth_postgres:
    image: postgres:15.5-alpine3.19
    container_name: auth_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
    volumes:
      - auth_pg_data:/var/lib/postgresql/data



  nginx:
    image: nginx:1.19.2
    container_name: nginx
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Nginx/auth_api.conf:/etc/nginx/conf.d/auth_api.conf:ro
      - ./Nginx/file_api.conf:/etc/nginx/conf.d/file_api.conf:ro
      #- ./Nginx/django_admin.conf:/etc/nginx/conf.d/django_admin.conf:ro
      - ./Nginx/cinema_api.conf:/etc/nginx/conf.d/cinema_api.conf:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      auth_api:
        condition: service_started
      file_api:
        condition: service_started
      cinema_api:
        condition: service_started
      app:
        condition: service_started
    ports:
      - "8001:8001"
      - "2080:2080"
      - "8002:8002"
      - "8003:8003"




volumes:
  auth_pg_data:
  cinema_pg_data:
  file_data:
  redis_data:
  es_data:
  minio_data:
  static_volume:
  media_volume: